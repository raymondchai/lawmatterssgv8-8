import{O as e}from"./ai-services-BdAg_3mV-1751185796186.js";import{am as n}from"./index-DTNQ23Y--1751185796186.js";import"./react-vendor-C9QDz5CC-1751185796186.js";import"./supabase-BTIOx2B1-1751185796186.js";import"./ui-components-CF1SvaKX-1751185796186.js";import"./data-fetching-CrvVXGHh-1751185796186.js";import"./utilities-BZamrgOT-1751185796186.js";import"./forms-CAQG-wcR-1751185796186.js";const t=new e({apiKey:n.openai.apiKey,dangerouslyAllowBrowser:!0});async function analyzeDocument(e){if(!n.openai.apiKey)throw new Error("OpenAI API key not configured");const o=`\n    Analyze this legal document and provide a structured analysis in JSON format:\n    \n    1. Executive summary (2-3 sentences)\n    2. Key entities (people, organizations, dates, amounts)\n    3. Document classification (contract, agreement, legal notice, etc.)\n    4. Legal implications (potential risks, obligations, rights)\n    5. Recommended actions (what the reader should do)\n    6. Confidence score (0-1, how confident you are in this analysis)\n    \n    Document text:\n    ${e.substring(0,8e3)} ${e.length>8e3?"...":""}\n    \n    Respond with valid JSON only, no additional text.\n  `;try{const e=await t.chat.completions.create({model:n.openai.model,messages:[{role:"system",content:"You are a legal AI assistant specializing in Singapore law. Provide accurate, helpful analysis of legal documents."},{role:"user",content:o}],max_tokens:n.openai.maxTokens,temperature:n.openai.temperature}),a=e.choices[0]?.message?.content;if(!a)throw new Error("No response from OpenAI");const r=JSON.parse(a);return{summary:r.summary||"",keyEntities:r.keyEntities||[],documentType:r.documentType||"Unknown",legalImplications:r.legalImplications||[],recommendedActions:r.recommendedActions||[],confidence:r.confidence||.5}}catch(a){throw console.error("Error analyzing document:",a),new Error("Failed to analyze document")}}async function generateEmbedding(e){if(!n.openai.apiKey)throw new Error("OpenAI API key not configured");try{const n=await t.embeddings.create({model:"text-embedding-3-small",input:e.substring(0,8e3)});return{embedding:n.data[0].embedding,usage:n.usage}}catch(o){throw console.error("Error generating embedding:",o),new Error("Failed to generate embedding")}}async function chatWithAI(e,o=[],a=[]){if(!n.openai.apiKey)throw new Error("OpenAI API key not configured");const r=[{role:"system",content:"You are a legal AI assistant specializing in Singapore law. \n    Provide helpful, accurate legal information while being clear that this is not legal advice.\n    Always recommend consulting with a qualified lawyer for specific legal matters.\n    If you reference information from the user's documents, mention that clearly."},...a,{role:"user",content:`${e}${o.length>0?`\n\nRelevant context from your documents:\n${o.join("\n\n")}`:""}`}];try{const e=await t.chat.completions.create({model:n.openai.model,messages:r,max_tokens:n.openai.maxTokens,temperature:.2}),a=e.choices[0]?.message?.content;if(!a)throw new Error("No response from OpenAI");return{message:a,sources:o.length>0?["Your uploaded documents"]:[],confidence:.8}}catch(s){throw console.error("Error in AI chat:",s),new Error("Failed to get AI response")}}async function summarizeDocument(e,o=500){if(!n.openai.apiKey)throw new Error("OpenAI API key not configured");const a=`\n    Provide a concise summary of this legal document in approximately ${o} characters.\n    Focus on the key points, parties involved, main obligations, and important dates.\n    \n    Document text:\n    ${e.substring(0,8e3)} ${e.length>8e3?"...":""}\n  `;try{const e=await t.chat.completions.create({model:n.openai.model,messages:[{role:"system",content:"You are a legal AI assistant. Provide clear, concise summaries of legal documents."},{role:"user",content:a}],max_tokens:Math.min(n.openai.maxTokens,1e3),temperature:n.openai.temperature});return e.choices[0]?.message?.content||"Unable to generate summary"}catch(r){throw console.error("Error summarizing document:",r),new Error("Failed to summarize document")}}async function extractEntities(e){if(!n.openai.apiKey)throw new Error("OpenAI API key not configured");const o=`\n    Extract key entities from this legal document and return them in JSON format:\n    \n    {\n      "people": ["names of people"],\n      "organizations": ["company names, law firms, etc."],\n      "dates": ["important dates"],\n      "amounts": ["monetary amounts, percentages"],\n      "locations": ["addresses, jurisdictions"]\n    }\n    \n    Document text:\n    ${e.substring(0,8e3)} ${e.length>8e3?"...":""}\n    \n    Respond with valid JSON only.\n  `;try{const e=await t.chat.completions.create({model:n.openai.model,messages:[{role:"system",content:"You are a legal AI assistant. Extract entities accurately from legal documents."},{role:"user",content:o}],max_tokens:1e3,temperature:.1}),a=e.choices[0]?.message?.content;if(!a)throw new Error("No response from OpenAI");const r=JSON.parse(a);return{people:r.people||[],organizations:r.organizations||[],dates:r.dates||[],amounts:r.amounts||[],locations:r.locations||[]}}catch(a){return console.error("Error extracting entities:",a),{people:[],organizations:[],dates:[],amounts:[],locations:[]}}}export{analyzeDocument,chatWithAI,extractEntities,generateEmbedding,t as openai,summarizeDocument};
